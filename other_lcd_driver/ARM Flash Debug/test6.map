Archive member included because of file (symbol)

C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
                              ARM Flash Debug/test6.o (ctl_task_init)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_mq.o)
                              ARM Flash Debug/test6.o (ctl_message_queue_init)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_arm.o)
                              C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o) (ctl_private_init_registers)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(__int32_umod.o)
                              C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_mq.o) (__umodsi3)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(__int32_udivmod.o)
                              ARM Flash Debug/test_AT91SAM7.o (__udivsi3)

Allocating common symbols
Common symbol       size              file

ctl_interrupt_count
                    0x1               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
new_task_stack      0x100             ARM Flash Debug/test6.o
queue               0x28              ARM Flash Debug/test6.o
ctl_current_time    0x4               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
ctl_task_executing  0x4               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
idleCount           0x4               ARM Flash Debug/test_AT91SAM7.o
mq                  0x10              ARM Flash Debug/test6.o
new_task            0x20              ARM Flash Debug/test6.o
main_task           0x20              ARM Flash Debug/test6.o
ctl_task_list       0x4               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)

Memory Configuration

Name             Origin             Length             Attributes
User_Peripherals 0xf0000000         0x0fff0000         xw
System_Controller 0xfffff000         0x00000000         xw
SRAM             0x00200000         0x00004000         xw
FLASH            0x00100000         0x00010000         xr
*default*        0x00000000         0xffffffff

Linker script and memory map

                0xf0000000                __User_Peripherals_segment_start__ = 0xf0000000
                0xffff0000                __User_Peripherals_segment_end__ = 0xffff0000
                0xfffff000                __System_Controller_segment_start__ = 0xfffff000
                0xfffff000                __System_Controller_segment_end__ = 0xfffff000
                0x00200000                __SRAM_segment_start__ = 0x200000
                0x00204000                __SRAM_segment_end__ = 0x204000
                0x00100000                __FLASH_segment_start__ = 0x100000
                0x00110000                __FLASH_segment_end__ = 0x110000
                0x00000400                __STACKSIZE__ = 0x400
                0x00000100                __STACKSIZE_IRQ__ = 0x100
                0x00000100                __STACKSIZE_FIQ__ = 0x100
                0x00000000                __STACKSIZE_SVC__ = 0x0
                0x00000000                __STACKSIZE_ABT__ = 0x0
                0x00000000                __STACKSIZE_UND__ = 0x0
                0x00000400                __HEAPSIZE__ = 0x400

.vectors_ram    0x00200000       0x3c
                0x00200000                __vectors_ram_start__ = .
 *(.vectors_ram)
                0x0020003c                . = ((__vectors_ram_start__ + 0x3c) MAX_K .)
 *fill*         0x00200000       0x3c 00
                0x0020003c                __vectors_ram_end__ = (__vectors_ram_start__ + SIZEOF (.vectors_ram))
                0x00000001                . = ASSERT (((__vectors_ram_end__ >= __SRAM_segment_start__) && (__vectors_ram_end__ <= (__SRAM_segment_start__ + 0x4000))), .vectors_ram is too large to fit in SRAM memory segment)

.vectors        0x00100000       0x3c
                0x00100000                __vectors_start__ = .
 *(.vectors .vectors.*)
 .vectors       0x00100000       0x3c ARM Flash Debug/AT91SAM7_Startup.o
                0x0010003c                __vectors_end__ = (__vectors_start__ + SIZEOF (.vectors))
                0x00000001                . = ASSERT (((__vectors_end__ >= __FLASH_segment_start__) && (__vectors_end__ <= (__FLASH_segment_start__ + 0x10000))), .vectors is too large to fit in FLASH memory segment)

.init           0x0010003c      0x274
                0x0010003c                __init_start__ = .
 *(.init .init.*)
 .init          0x0010003c      0x1e0 ARM Flash Debug/crt0.o
                0x0010003c                __start
                0x0010003c                _start
 .init          0x0010021c       0x94 ARM Flash Debug/AT91SAM7_Startup.o
                0x00100284                undef_handler
                0x0010028c                pabort_handler
                0x00100290                dabort_handler
                0x00100298                fiq_handler
                0x001002b0                __init_end__ = (__init_start__ + SIZEOF (.init))
                0x00000001                . = ASSERT (((__init_end__ >= __FLASH_segment_start__) && (__init_end__ <= (__FLASH_segment_start__ + 0x10000))), .init is too large to fit in FLASH memory segment)

.text_load      0x001002b0        0x0
                0x001002b0                __text_load_start__ = .
 *(.text_load)
                0x001002b0                __text_load_end__ = (__text_load_start__ + SIZEOF (.text_load))
                0x00000001                . = ASSERT (((__text_load_end__ >= __FLASH_segment_start__) && (__text_load_end__ <= (__FLASH_segment_start__ + 0x10000))), .text_load is too large to fit in FLASH memory segment)

.text           0x001002b0     0x127c
                0x001002b0                __text_start__ = .
 *(.text .text.* .glue_7t .glue_7 .gnu.linkonce.t.*)
 .text          0x001002b0      0x108 ARM Flash Debug/test6.o
                0x001002f4                ctl_handle_error
                0x0010030c                main
                0x001002b0                new_task_code
 .text          0x001003b8      0x188 ARM Flash Debug/test_AT91SAM7.o
                0x00100514                Idle
                0x001003f0                SetTimerISR
                0x001004f8                TicksPerSecond
 .text          0x00100540      0x1e0 ARM Flash Debug/test_AT91SAM7EK.o
                0x00100540                BoardInit
                0x001006c4                SetLeds
                0x00100584                ProcessorClockFrequency
                0x0010061c                SetButtonPressedISR
 .text          0x00100720      0x268 ARM Flash Debug/AT91SAM7.o
                0x00100904                ctl_unmask_isr
                0x00100774                ctl_set_isr
                0x00100720                irq_handler
                0x00100944                ctl_mask_isr
 .text          0x00100988      0x58c C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
                0x00100c38                ctl_task_remove
                0x00100abc                ctl_task_reschedule
                0x00100cec                ctl_task_set_priority
                0x00100b3c                ctl_task_init
                0x00100d98                ctl_exit_isr
                0x00100d30                ctl_timeout_wait
                0x00100be8                ctl_task_die
                0x00100ee8                ctl_get_current_time
                0x00100b60                ctl_task_run
                0x00100e88                ctl_increment_tick_from_isr
 .text          0x00100f14      0x3c8 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_mq.o)
                0x00100fd4                ctl_message_queue_post
                0x00100f14                ctl_message_queue_init
                0x001010f8                ctl_message_queue_receive
                0x0010120c                ctl_message_queue_post_nb
 .text          0x001012dc      0x20c C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_arm.o)
                0x00101374                ctl_private_switch_context
                0x001014ac                ctl_global_interrupts_re_enable_from_isr
                0x00101460                ctl_global_interrupts_disable
                0x00101488                ctl_global_interrupts_set
                0x001014c8                ctl_global_interrupts_un_re_enable_from_isr
                0x00101424                ctl_private_isr_return
                0x00101438                ctl_global_interrupts_enable
                0x001013a8                ctl_private_switch_isr_context
                0x00101338                swi_handler
                0x001012dc                ctl_private_init_registers
 .text          0x001014e8       0x14 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(__int32_umod.o)
                0x001014e8                __umodsi3
                0x001014e8                __int32_umod
 .text          0x001014fc       0x30 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(__int32_udivmod.o)
                0x001014fc                __int32_udiv
                0x001014fc                __int32_udivmod
                0x001014fc                __udivsi3
                0x0010152c                __text_end__ = (__text_start__ + SIZEOF (.text))
                0x00000001                . = ASSERT (((__text_end__ >= __FLASH_segment_start__) && (__text_end__ <= (__FLASH_segment_start__ + 0x10000))), .text is too large to fit in FLASH memory segment)

.dtors          0x0010152c        0x0
                0x0010152c                __dtors_start__ = .
 *(SORT(.dtors.*))
 *(.dtors)
                0x0010152c                __dtors_end__ = (__dtors_start__ + SIZEOF (.dtors))
                0x00000001                . = ASSERT (((__dtors_end__ >= __FLASH_segment_start__) && (__dtors_end__ <= (__FLASH_segment_start__ + 0x10000))), .dtors is too large to fit in FLASH memory segment)

.ctors          0x0010152c        0x0
                0x0010152c                __ctors_start__ = .
 *(SORT(.ctors.*))
 *(.ctors)
                0x0010152c                __ctors_end__ = (__ctors_start__ + SIZEOF (.ctors))
                0x00000001                . = ASSERT (((__ctors_end__ >= __FLASH_segment_start__) && (__ctors_end__ <= (__FLASH_segment_start__ + 0x10000))), .ctors is too large to fit in FLASH memory segment)

.rodata         0x0010152c       0x14
                0x0010152c                __rodata_start__ = .
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata        0x0010152c       0x14 ARM Flash Debug/test6.o
                0x00101540                __rodata_end__ = (__rodata_start__ + SIZEOF (.rodata))
                0x00000001                . = ASSERT (((__rodata_end__ >= __FLASH_segment_start__) && (__rodata_end__ <= (__FLASH_segment_start__ + 0x10000))), .rodata is too large to fit in FLASH memory segment)
                0x00101540                __fast_load_start__ = (__rodata_end__ ALIGN 0x4)

.fast           0x0020003c        0x0 load address 0x00101540
                0x0020003c                __fast_start__ = .
 *(.fast .fast.*)
                0x0020003c                __fast_end__ = (__fast_start__ + SIZEOF (.fast))
                0x00000001                . = ASSERT ((((__fast_load_start__ + SIZEOF (.fast)) >= __FLASH_segment_start__) && ((__fast_load_start__ + SIZEOF (.fast)) <= (__FLASH_segment_start__ + 0x10000))), .fast is too large to fit in FLASH memory segment)

.fast_run       0x0020003c        0x0
                0x0020003c                __fast_run_start__ = .
                0x0020003c                . = ((__fast_run_start__ + SIZEOF (.fast)) MAX_K .)
                0x0020003c                __fast_run_end__ = (__fast_run_start__ + SIZEOF (.fast_run))
                0x00000001                . = ASSERT (((__fast_run_end__ >= __SRAM_segment_start__) && (__fast_run_end__ <= (__SRAM_segment_start__ + 0x4000))), .fast_run is too large to fit in SRAM memory segment)
                0x00101540                __data_load_start__ = ((__fast_load_start__ + SIZEOF (.fast)) ALIGN 0x4)

.data           0x0020003c        0x0 load address 0x00101540
                0x0020003c                __data_start__ = .
 *(.data .data.* .gnu.linkonce.d.*)
                0x0020003c                __data_end__ = (__data_start__ + SIZEOF (.data))
                0x00000001                . = ASSERT ((((__data_load_start__ + SIZEOF (.data)) >= __FLASH_segment_start__) && ((__data_load_start__ + SIZEOF (.data)) <= (__FLASH_segment_start__ + 0x10000))), .data is too large to fit in FLASH memory segment)

.data_run       0x0020003c        0x0
                0x0020003c                __data_run_start__ = .
                0x0020003c                . = ((__data_run_start__ + SIZEOF (.data)) MAX_K .)
                0x0020003c                __data_run_end__ = (__data_run_start__ + SIZEOF (.data_run))
                0x00000001                . = ASSERT (((__data_run_end__ >= __SRAM_segment_start__) && (__data_run_end__ <= (__SRAM_segment_start__ + 0x4000))), .data_run is too large to fit in SRAM memory segment)

.bss            0x0020003c      0x1a0
                0x0020003c                __bss_start__ = .
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss           0x0020003c        0x4 ARM Flash Debug/test6.o
                0x0020003c                v
 .bss           0x00200040        0x8 ARM Flash Debug/test_AT91SAM7.o
 .bss           0x00200048        0x4 ARM Flash Debug/test_AT91SAM7EK.o
 .bss           0x0020004c        0x4 ARM Flash Debug/AT91SAM7.o
 *(COMMON)
 COMMON         0x00200050      0x178 ARM Flash Debug/test6.o
                0x00200050                new_task_stack
                0x00200150                queue
                0x00200178                mq
                0x00200188                new_task
                0x002001a8                main_task
 COMMON         0x002001c8        0x4 ARM Flash Debug/test_AT91SAM7.o
                0x002001c8                idleCount
 COMMON         0x002001cc       0x10 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
                0x002001cc                ctl_interrupt_count
                0x002001d0                ctl_current_time
                0x002001d4                ctl_task_executing
                0x002001d8                ctl_task_list
                0x002001dc                __bss_end__ = (__bss_start__ + SIZEOF (.bss))
                0x00000001                . = ASSERT (((__bss_end__ >= __SRAM_segment_start__) && (__bss_end__ <= (__SRAM_segment_start__ + 0x4000))), .bss is too large to fit in SRAM memory segment)

.heap           0x002001dc      0x400
                0x002001dc                __heap_start__ = .
 *(.heap)
                0x002005dc                . = ((__heap_start__ + __HEAPSIZE__) MAX_K .)
 *fill*         0x002001dc      0x400 00
                0x002005dc                __heap_end__ = (__heap_start__ + SIZEOF (.heap))
                0x00000001                . = ASSERT (((__heap_end__ >= __SRAM_segment_start__) && (__heap_end__ <= (__SRAM_segment_start__ + 0x4000))), .heap is too large to fit in SRAM memory segment)

.stack          0x002005dc      0x400
                0x002005dc                __stack_start__ = .
 *(.stack)
                0x002009dc                . = ((__stack_start__ + __STACKSIZE__) MAX_K .)
 *fill*         0x002005dc      0x400 00
                0x002009dc                __stack_end__ = (__stack_start__ + SIZEOF (.stack))
                0x00000001                . = ASSERT (((__stack_end__ >= __SRAM_segment_start__) && (__stack_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack is too large to fit in SRAM memory segment)

.stack_irq      0x002009dc      0x100
                0x002009dc                __stack_irq_start__ = .
 *(.stack_irq)
                0x00200adc                . = ((__stack_irq_start__ + __STACKSIZE_IRQ__) MAX_K .)
 *fill*         0x002009dc      0x100 00
                0x00200adc                __stack_irq_end__ = (__stack_irq_start__ + SIZEOF (.stack_irq))
                0x00000001                . = ASSERT (((__stack_irq_end__ >= __SRAM_segment_start__) && (__stack_irq_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_irq is too large to fit in SRAM memory segment)

.stack_fiq      0x00200adc      0x100
                0x00200adc                __stack_fiq_start__ = .
 *(.stack_fiq)
                0x00200bdc                . = ((__stack_fiq_start__ + __STACKSIZE_FIQ__) MAX_K .)
 *fill*         0x00200adc      0x100 00
                0x00200bdc                __stack_fiq_end__ = (__stack_fiq_start__ + SIZEOF (.stack_fiq))
                0x00000001                . = ASSERT (((__stack_fiq_end__ >= __SRAM_segment_start__) && (__stack_fiq_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_fiq is too large to fit in SRAM memory segment)

.stack_svc      0x00200bdc        0x0
                0x00200bdc                __stack_svc_start__ = .
 *(.stack_svc)
                0x00200bdc                . = ((__stack_svc_start__ + __STACKSIZE_SVC__) MAX_K .)
                0x00200bdc                __stack_svc_end__ = (__stack_svc_start__ + SIZEOF (.stack_svc))
                0x00000001                . = ASSERT (((__stack_svc_end__ >= __SRAM_segment_start__) && (__stack_svc_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_svc is too large to fit in SRAM memory segment)

.stack_abt      0x00200bdc        0x0
                0x00200bdc                __stack_abt_start__ = .
 *(.stack_abt)
                0x00200bdc                . = ((__stack_abt_start__ + __STACKSIZE_ABT__) MAX_K .)
                0x00200bdc                __stack_abt_end__ = (__stack_abt_start__ + SIZEOF (.stack_abt))
                0x00000001                . = ASSERT (((__stack_abt_end__ >= __SRAM_segment_start__) && (__stack_abt_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_abt is too large to fit in SRAM memory segment)

.stack_und      0x00200bdc        0x0
                0x00200bdc                __stack_und_start__ = .
 *(.stack_und)
                0x00200bdc                . = ((__stack_und_start__ + __STACKSIZE_UND__) MAX_K .)
                0x00200bdc                __stack_und_end__ = (__stack_und_start__ + SIZEOF (.stack_und))
                0x00000001                . = ASSERT (((__stack_und_end__ >= __SRAM_segment_start__) && (__stack_und_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_und is too large to fit in SRAM memory segment)
START GROUP
LOAD ARM Flash Debug/test6.o
LOAD ARM Flash Debug/test_AT91SAM7.o
LOAD ARM Flash Debug/test_AT91SAM7EK.o
LOAD ARM Flash Debug/crt0.o
LOAD ARM Flash Debug/AT91SAM7_Startup.o
LOAD ARM Flash Debug/AT91SAM7.o
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libarmdi_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libm_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libcpp_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libgccfp_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/lib_vfprintf_long_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/lib_vfscanf_long_v4t_a_i_le_mt.a
END GROUP
OUTPUT(ARM Flash Debug/test6.elf elf32-littlearm)

.debug_abbrev   0x00000000      0x39e
 .debug_abbrev  0x00000000      0x120 ARM Flash Debug/test6.o
 .debug_abbrev  0x00000120       0xd7 ARM Flash Debug/test_AT91SAM7.o
 .debug_abbrev  0x000001f7       0xc5 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_abbrev  0x000002bc       0x14 ARM Flash Debug/crt0.o
 .debug_abbrev  0x000002d0       0x10 ARM Flash Debug/AT91SAM7_Startup.o
 .debug_abbrev  0x000002e0       0xbe ARM Flash Debug/AT91SAM7.o

.debug_info     0x00000000      0xe60
 .debug_info    0x00000000      0x453 ARM Flash Debug/test6.o
 .debug_info    0x00000453      0x234 ARM Flash Debug/test_AT91SAM7.o
 .debug_info    0x00000687      0x26c ARM Flash Debug/test_AT91SAM7EK.o
 .debug_info    0x000008f3       0xf9 ARM Flash Debug/crt0.o
 .debug_info    0x000009ec      0x10d ARM Flash Debug/AT91SAM7_Startup.o
 .debug_info    0x00000af9      0x367 ARM Flash Debug/AT91SAM7.o

.debug_line     0x00000000      0x63a
 .debug_line    0x00000000       0xf9 ARM Flash Debug/test6.o
 .debug_line    0x000000f9      0x10a ARM Flash Debug/test_AT91SAM7.o
 .debug_line    0x00000203      0x115 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_line    0x00000318      0x104 ARM Flash Debug/crt0.o
 .debug_line    0x0000041c       0xf3 ARM Flash Debug/AT91SAM7_Startup.o
 .debug_line    0x0000050f      0x12b ARM Flash Debug/AT91SAM7.o

.debug_frame    0x00000000      0x314
 .debug_frame   0x00000000       0x94 ARM Flash Debug/test6.o
 .debug_frame   0x00000094       0xc4 ARM Flash Debug/test_AT91SAM7.o
 .debug_frame   0x00000158      0x118 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_frame   0x00000270       0xa4 ARM Flash Debug/AT91SAM7.o

.debug_pubnames
                0x00000000      0x189
 .debug_pubnames
                0x00000000       0x87 ARM Flash Debug/test6.o
 .debug_pubnames
                0x00000087       0x4c ARM Flash Debug/test_AT91SAM7.o
 .debug_pubnames
                0x000000d3       0x60 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_pubnames
                0x00000133       0x56 ARM Flash Debug/AT91SAM7.o

.debug_aranges  0x00000000       0xc8
 .debug_aranges
                0x00000000       0x20 ARM Flash Debug/test6.o
 .debug_aranges
                0x00000020       0x20 ARM Flash Debug/test_AT91SAM7.o
 .debug_aranges
                0x00000040       0x20 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_aranges
                0x00000060       0x20 ARM Flash Debug/crt0.o
 .debug_aranges
                0x00000080       0x28 ARM Flash Debug/AT91SAM7_Startup.o
 .debug_aranges
                0x000000a8       0x20 ARM Flash Debug/AT91SAM7.o

.debug_str      0x00000000       0x19
 .debug_str     0x00000000       0x12 ARM Flash Debug/test6.o
 .debug_str     0x00000012        0x7 ARM Flash Debug/AT91SAM7.o

.comment        0x00000000       0x6c
 .comment       0x00000000       0x12 ARM Flash Debug/test6.o
 .comment       0x00000012       0x12 ARM Flash Debug/test_AT91SAM7.o
 .comment       0x00000024       0x12 ARM Flash Debug/test_AT91SAM7EK.o
 .comment       0x00000036       0x12 ARM Flash Debug/AT91SAM7.o
 .comment       0x00000048       0x12 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
 .comment       0x0000005a       0x12 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_mq.o)
