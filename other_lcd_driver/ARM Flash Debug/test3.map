Archive member included because of file (symbol)

C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
                              ARM Flash Debug/test3.o (ctl_task_init)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_evt.o)
                              ARM Flash Debug/test3.o (ctl_events_wait)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_arm.o)
                              C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o) (ctl_private_init_registers)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(__int32_udivmod.o)
                              ARM Flash Debug/test_AT91SAM7.o (__udivsi3)
C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(memset.o)
                              ARM Flash Debug/test3.o (memset)

Allocating common symbols
Common symbol       size              file

ctl_interrupt_count
                    0x1               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
otherTask           0x20              ARM Flash Debug/test3.o
mainTask            0x20              ARM Flash Debug/test3.o
ctl_current_time    0x4               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
ctl_task_executing  0x4               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
idleCount           0x4               ARM Flash Debug/test_AT91SAM7.o
otherStack          0x108             ARM Flash Debug/test3.o
ctl_task_list       0x4               C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)

Memory Configuration

Name             Origin             Length             Attributes
User_Peripherals 0xf0000000         0x0fff0000         xw
System_Controller 0xfffff000         0x00000000         xw
SRAM             0x00200000         0x00004000         xw
FLASH            0x00100000         0x00010000         xr
*default*        0x00000000         0xffffffff

Linker script and memory map

                0xf0000000                __User_Peripherals_segment_start__ = 0xf0000000
                0xffff0000                __User_Peripherals_segment_end__ = 0xffff0000
                0xfffff000                __System_Controller_segment_start__ = 0xfffff000
                0xfffff000                __System_Controller_segment_end__ = 0xfffff000
                0x00200000                __SRAM_segment_start__ = 0x200000
                0x00204000                __SRAM_segment_end__ = 0x204000
                0x00100000                __FLASH_segment_start__ = 0x100000
                0x00110000                __FLASH_segment_end__ = 0x110000
                0x00000400                __STACKSIZE__ = 0x400
                0x00000100                __STACKSIZE_IRQ__ = 0x100
                0x00000100                __STACKSIZE_FIQ__ = 0x100
                0x00000000                __STACKSIZE_SVC__ = 0x0
                0x00000000                __STACKSIZE_ABT__ = 0x0
                0x00000000                __STACKSIZE_UND__ = 0x0
                0x00000400                __HEAPSIZE__ = 0x400

.vectors_ram    0x00200000       0x3c
                0x00200000                __vectors_ram_start__ = .
 *(.vectors_ram)
                0x0020003c                . = ((__vectors_ram_start__ + 0x3c) MAX_K .)
 *fill*         0x00200000       0x3c 00
                0x0020003c                __vectors_ram_end__ = (__vectors_ram_start__ + SIZEOF (.vectors_ram))
                0x00000001                . = ASSERT (((__vectors_ram_end__ >= __SRAM_segment_start__) && (__vectors_ram_end__ <= (__SRAM_segment_start__ + 0x4000))), .vectors_ram is too large to fit in SRAM memory segment)

.vectors        0x00100000       0x3c
                0x00100000                __vectors_start__ = .
 *(.vectors .vectors.*)
 .vectors       0x00100000       0x3c ARM Flash Debug/AT91SAM7_Startup.o
                0x0010003c                __vectors_end__ = (__vectors_start__ + SIZEOF (.vectors))
                0x00000001                . = ASSERT (((__vectors_end__ >= __FLASH_segment_start__) && (__vectors_end__ <= (__FLASH_segment_start__ + 0x10000))), .vectors is too large to fit in FLASH memory segment)

.init           0x0010003c      0x274
                0x0010003c                __init_start__ = .
 *(.init .init.*)
 .init          0x0010003c      0x1e0 ARM Flash Debug/crt0.o
                0x0010003c                __start
                0x0010003c                _start
 .init          0x0010021c       0x94 ARM Flash Debug/AT91SAM7_Startup.o
                0x00100284                undef_handler
                0x0010028c                pabort_handler
                0x00100290                dabort_handler
                0x00100298                fiq_handler
                0x001002b0                __init_end__ = (__init_start__ + SIZEOF (.init))
                0x00000001                . = ASSERT (((__init_end__ >= __FLASH_segment_start__) && (__init_end__ <= (__FLASH_segment_start__ + 0x10000))), .init is too large to fit in FLASH memory segment)

.text_load      0x001002b0        0x0
                0x001002b0                __text_load_start__ = .
 *(.text_load)
                0x001002b0                __text_load_end__ = (__text_load_start__ + SIZEOF (.text_load))
                0x00000001                . = ASSERT (((__text_load_end__ >= __FLASH_segment_start__) && (__text_load_end__ <= (__FLASH_segment_start__ + 0x10000))), .text_load is too large to fit in FLASH memory segment)

.text           0x001002b0     0x1264
                0x001002b0                __text_start__ = .
 *(.text .text.* .glue_7t .glue_7 .gnu.linkonce.t.*)
 .text          0x001002b0      0x23c ARM Flash Debug/test3.o
                0x00100330                other
                0x001002b0                buttonPressedISR
                0x0010040c                ctl_handle_error
                0x00100424                main
                0x001002f0                timerISR
 .text          0x001004ec      0x188 ARM Flash Debug/test_AT91SAM7.o
                0x00100648                Idle
                0x00100524                SetTimerISR
                0x0010062c                TicksPerSecond
 .text          0x00100674      0x1e0 ARM Flash Debug/test_AT91SAM7EK.o
                0x00100674                BoardInit
                0x001007f8                SetLeds
                0x001006b8                ProcessorClockFrequency
                0x00100750                SetButtonPressedISR
 .text          0x00100854      0x268 ARM Flash Debug/AT91SAM7.o
                0x00100a38                ctl_unmask_isr
                0x001008a8                ctl_set_isr
                0x00100854                irq_handler
                0x00100a78                ctl_mask_isr
 .text          0x00100abc      0x58c C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
                0x00100d6c                ctl_task_remove
                0x00100bf0                ctl_task_reschedule
                0x00100e20                ctl_task_set_priority
                0x00100c70                ctl_task_init
                0x00100ecc                ctl_exit_isr
                0x00100e64                ctl_timeout_wait
                0x00100d1c                ctl_task_die
                0x0010101c                ctl_get_current_time
                0x00100c94                ctl_task_run
                0x00100fbc                ctl_increment_tick_from_isr
 .text          0x00101048      0x1fc C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_evt.o)
                0x00101154                ctl_events_set_clear
                0x00101048                ctl_events_init
                0x00101070                ctl_events_wait
 .text          0x00101244      0x20c C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_arm.o)
                0x001012dc                ctl_private_switch_context
                0x00101414                ctl_global_interrupts_re_enable_from_isr
                0x001013c8                ctl_global_interrupts_disable
                0x001013f0                ctl_global_interrupts_set
                0x00101430                ctl_global_interrupts_un_re_enable_from_isr
                0x0010138c                ctl_private_isr_return
                0x001013a0                ctl_global_interrupts_enable
                0x00101310                ctl_private_switch_isr_context
                0x001012a0                swi_handler
                0x00101244                ctl_private_init_registers
 .text          0x00101450       0x30 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(__int32_udivmod.o)
                0x00101450                __int32_udiv
                0x00101450                __int32_udivmod
                0x00101450                __udivsi3
 .text          0x00101480       0x94 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a(memset.o)
                0x00101480                memset
                0x00101514                __text_end__ = (__text_start__ + SIZEOF (.text))
                0x00000001                . = ASSERT (((__text_end__ >= __FLASH_segment_start__) && (__text_end__ <= (__FLASH_segment_start__ + 0x10000))), .text is too large to fit in FLASH memory segment)

.dtors          0x00101514        0x0
                0x00101514                __dtors_start__ = .
 *(SORT(.dtors.*))
 *(.dtors)
                0x00101514                __dtors_end__ = (__dtors_start__ + SIZEOF (.dtors))
                0x00000001                . = ASSERT (((__dtors_end__ >= __FLASH_segment_start__) && (__dtors_end__ <= (__FLASH_segment_start__ + 0x10000))), .dtors is too large to fit in FLASH memory segment)

.ctors          0x00101514        0x0
                0x00101514                __ctors_start__ = .
 *(SORT(.ctors.*))
 *(.ctors)
                0x00101514                __ctors_end__ = (__ctors_start__ + SIZEOF (.ctors))
                0x00000001                . = ASSERT (((__ctors_end__ >= __FLASH_segment_start__) && (__ctors_end__ <= (__FLASH_segment_start__ + 0x10000))), .ctors is too large to fit in FLASH memory segment)

.rodata         0x00101514       0x10
                0x00101514                __rodata_start__ = .
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata        0x00101514       0x10 ARM Flash Debug/test3.o
                0x00101524                __rodata_end__ = (__rodata_start__ + SIZEOF (.rodata))
                0x00000001                . = ASSERT (((__rodata_end__ >= __FLASH_segment_start__) && (__rodata_end__ <= (__FLASH_segment_start__ + 0x10000))), .rodata is too large to fit in FLASH memory segment)
                0x00101524                __fast_load_start__ = (__rodata_end__ ALIGN 0x4)

.fast           0x0020003c        0x0 load address 0x00101524
                0x0020003c                __fast_start__ = .
 *(.fast .fast.*)
                0x0020003c                __fast_end__ = (__fast_start__ + SIZEOF (.fast))
                0x00000001                . = ASSERT ((((__fast_load_start__ + SIZEOF (.fast)) >= __FLASH_segment_start__) && ((__fast_load_start__ + SIZEOF (.fast)) <= (__FLASH_segment_start__ + 0x10000))), .fast is too large to fit in FLASH memory segment)

.fast_run       0x0020003c        0x0
                0x0020003c                __fast_run_start__ = .
                0x0020003c                . = ((__fast_run_start__ + SIZEOF (.fast)) MAX_K .)
                0x0020003c                __fast_run_end__ = (__fast_run_start__ + SIZEOF (.fast_run))
                0x00000001                . = ASSERT (((__fast_run_end__ >= __SRAM_segment_start__) && (__fast_run_end__ <= (__SRAM_segment_start__ + 0x4000))), .fast_run is too large to fit in SRAM memory segment)
                0x00101524                __data_load_start__ = ((__fast_load_start__ + SIZEOF (.fast)) ALIGN 0x4)

.data           0x0020003c        0x0 load address 0x00101524
                0x0020003c                __data_start__ = .
 *(.data .data.* .gnu.linkonce.d.*)
                0x0020003c                __data_end__ = (__data_start__ + SIZEOF (.data))
                0x00000001                . = ASSERT ((((__data_load_start__ + SIZEOF (.data)) >= __FLASH_segment_start__) && ((__data_load_start__ + SIZEOF (.data)) <= (__FLASH_segment_start__ + 0x10000))), .data is too large to fit in FLASH memory segment)

.data_run       0x0020003c        0x0
                0x0020003c                __data_run_start__ = .
                0x0020003c                . = ((__data_run_start__ + SIZEOF (.data)) MAX_K .)
                0x0020003c                __data_run_end__ = (__data_run_start__ + SIZEOF (.data_run))
                0x00000001                . = ASSERT (((__data_run_end__ >= __SRAM_segment_start__) && (__data_run_end__ <= (__SRAM_segment_start__ + 0x4000))), .data_run is too large to fit in SRAM memory segment)

.bss            0x0020003c      0x178
                0x0020003c                __bss_start__ = .
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss           0x0020003c        0xc ARM Flash Debug/test3.o
                0x00200044                count2
                0x00200040                count
                0x0020003c                e1
 .bss           0x00200048        0x8 ARM Flash Debug/test_AT91SAM7.o
 .bss           0x00200050        0x4 ARM Flash Debug/test_AT91SAM7EK.o
 .bss           0x00200054        0x4 ARM Flash Debug/AT91SAM7.o
 *(COMMON)
 COMMON         0x00200058      0x148 ARM Flash Debug/test3.o
                0x00200058                otherTask
                0x00200078                mainTask
                0x00200098                otherStack
 COMMON         0x002001a0        0x4 ARM Flash Debug/test_AT91SAM7.o
                0x002001a0                idleCount
 COMMON         0x002001a4       0x10 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
                0x002001a4                ctl_interrupt_count
                0x002001a8                ctl_current_time
                0x002001ac                ctl_task_executing
                0x002001b0                ctl_task_list
                0x002001b4                __bss_end__ = (__bss_start__ + SIZEOF (.bss))
                0x00000001                . = ASSERT (((__bss_end__ >= __SRAM_segment_start__) && (__bss_end__ <= (__SRAM_segment_start__ + 0x4000))), .bss is too large to fit in SRAM memory segment)

.heap           0x002001b4      0x400
                0x002001b4                __heap_start__ = .
 *(.heap)
                0x002005b4                . = ((__heap_start__ + __HEAPSIZE__) MAX_K .)
 *fill*         0x002001b4      0x400 00
                0x002005b4                __heap_end__ = (__heap_start__ + SIZEOF (.heap))
                0x00000001                . = ASSERT (((__heap_end__ >= __SRAM_segment_start__) && (__heap_end__ <= (__SRAM_segment_start__ + 0x4000))), .heap is too large to fit in SRAM memory segment)

.stack          0x002005b4      0x400
                0x002005b4                __stack_start__ = .
 *(.stack)
                0x002009b4                . = ((__stack_start__ + __STACKSIZE__) MAX_K .)
 *fill*         0x002005b4      0x400 00
                0x002009b4                __stack_end__ = (__stack_start__ + SIZEOF (.stack))
                0x00000001                . = ASSERT (((__stack_end__ >= __SRAM_segment_start__) && (__stack_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack is too large to fit in SRAM memory segment)

.stack_irq      0x002009b4      0x100
                0x002009b4                __stack_irq_start__ = .
 *(.stack_irq)
                0x00200ab4                . = ((__stack_irq_start__ + __STACKSIZE_IRQ__) MAX_K .)
 *fill*         0x002009b4      0x100 00
                0x00200ab4                __stack_irq_end__ = (__stack_irq_start__ + SIZEOF (.stack_irq))
                0x00000001                . = ASSERT (((__stack_irq_end__ >= __SRAM_segment_start__) && (__stack_irq_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_irq is too large to fit in SRAM memory segment)

.stack_fiq      0x00200ab4      0x100
                0x00200ab4                __stack_fiq_start__ = .
 *(.stack_fiq)
                0x00200bb4                . = ((__stack_fiq_start__ + __STACKSIZE_FIQ__) MAX_K .)
 *fill*         0x00200ab4      0x100 00
                0x00200bb4                __stack_fiq_end__ = (__stack_fiq_start__ + SIZEOF (.stack_fiq))
                0x00000001                . = ASSERT (((__stack_fiq_end__ >= __SRAM_segment_start__) && (__stack_fiq_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_fiq is too large to fit in SRAM memory segment)

.stack_svc      0x00200bb4        0x0
                0x00200bb4                __stack_svc_start__ = .
 *(.stack_svc)
                0x00200bb4                . = ((__stack_svc_start__ + __STACKSIZE_SVC__) MAX_K .)
                0x00200bb4                __stack_svc_end__ = (__stack_svc_start__ + SIZEOF (.stack_svc))
                0x00000001                . = ASSERT (((__stack_svc_end__ >= __SRAM_segment_start__) && (__stack_svc_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_svc is too large to fit in SRAM memory segment)

.stack_abt      0x00200bb4        0x0
                0x00200bb4                __stack_abt_start__ = .
 *(.stack_abt)
                0x00200bb4                . = ((__stack_abt_start__ + __STACKSIZE_ABT__) MAX_K .)
                0x00200bb4                __stack_abt_end__ = (__stack_abt_start__ + SIZEOF (.stack_abt))
                0x00000001                . = ASSERT (((__stack_abt_end__ >= __SRAM_segment_start__) && (__stack_abt_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_abt is too large to fit in SRAM memory segment)

.stack_und      0x00200bb4        0x0
                0x00200bb4                __stack_und_start__ = .
 *(.stack_und)
                0x00200bb4                . = ((__stack_und_start__ + __STACKSIZE_UND__) MAX_K .)
                0x00200bb4                __stack_und_end__ = (__stack_und_start__ + SIZEOF (.stack_und))
                0x00000001                . = ASSERT (((__stack_und_end__ >= __SRAM_segment_start__) && (__stack_und_end__ <= (__SRAM_segment_start__ + 0x4000))), .stack_und is too large to fit in SRAM memory segment)
START GROUP
LOAD ARM Flash Debug/test3.o
LOAD ARM Flash Debug/test_AT91SAM7.o
LOAD ARM Flash Debug/test_AT91SAM7EK.o
LOAD ARM Flash Debug/crt0.o
LOAD ARM Flash Debug/AT91SAM7_Startup.o
LOAD ARM Flash Debug/AT91SAM7.o
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libarmdi_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libm_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libc_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libcpp_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/libgccfp_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/lib_vfprintf_long_v4t_a_i_le_mt.a
LOAD C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/lib/lib_vfscanf_long_v4t_a_i_le_mt.a
END GROUP
OUTPUT(ARM Flash Debug/test3.elf elf32-littlearm)

.debug_abbrev   0x00000000      0x3af
 .debug_abbrev  0x00000000      0x131 ARM Flash Debug/test3.o
 .debug_abbrev  0x00000131       0xd7 ARM Flash Debug/test_AT91SAM7.o
 .debug_abbrev  0x00000208       0xc5 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_abbrev  0x000002cd       0x14 ARM Flash Debug/crt0.o
 .debug_abbrev  0x000002e1       0x10 ARM Flash Debug/AT91SAM7_Startup.o
 .debug_abbrev  0x000002f1       0xbe ARM Flash Debug/AT91SAM7.o

.debug_info     0x00000000      0xe2d
 .debug_info    0x00000000      0x420 ARM Flash Debug/test3.o
 .debug_info    0x00000420      0x234 ARM Flash Debug/test_AT91SAM7.o
 .debug_info    0x00000654      0x26c ARM Flash Debug/test_AT91SAM7EK.o
 .debug_info    0x000008c0       0xf9 ARM Flash Debug/crt0.o
 .debug_info    0x000009b9      0x10d ARM Flash Debug/AT91SAM7_Startup.o
 .debug_info    0x00000ac6      0x367 ARM Flash Debug/AT91SAM7.o

.debug_line     0x00000000      0x64e
 .debug_line    0x00000000      0x10d ARM Flash Debug/test3.o
 .debug_line    0x0000010d      0x10a ARM Flash Debug/test_AT91SAM7.o
 .debug_line    0x00000217      0x115 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_line    0x0000032c      0x104 ARM Flash Debug/crt0.o
 .debug_line    0x00000430       0xf3 ARM Flash Debug/AT91SAM7_Startup.o
 .debug_line    0x00000523      0x12b ARM Flash Debug/AT91SAM7.o

.debug_frame    0x00000000      0x36c
 .debug_frame   0x00000000       0xec ARM Flash Debug/test3.o
 .debug_frame   0x000000ec       0xc4 ARM Flash Debug/test_AT91SAM7.o
 .debug_frame   0x000001b0      0x118 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_frame   0x000002c8       0xa4 ARM Flash Debug/AT91SAM7.o

.debug_pubnames
                0x00000000      0x1a4
 .debug_pubnames
                0x00000000       0xa2 ARM Flash Debug/test3.o
 .debug_pubnames
                0x000000a2       0x4c ARM Flash Debug/test_AT91SAM7.o
 .debug_pubnames
                0x000000ee       0x60 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_pubnames
                0x0000014e       0x56 ARM Flash Debug/AT91SAM7.o

.debug_aranges  0x00000000       0xc8
 .debug_aranges
                0x00000000       0x20 ARM Flash Debug/test3.o
 .debug_aranges
                0x00000020       0x20 ARM Flash Debug/test_AT91SAM7.o
 .debug_aranges
                0x00000040       0x20 ARM Flash Debug/test_AT91SAM7EK.o
 .debug_aranges
                0x00000060       0x20 ARM Flash Debug/crt0.o
 .debug_aranges
                0x00000080       0x28 ARM Flash Debug/AT91SAM7_Startup.o
 .debug_aranges
                0x000000a8       0x20 ARM Flash Debug/AT91SAM7.o

.debug_str      0x00000000       0x19
 .debug_str     0x00000000       0x12 ARM Flash Debug/test3.o
 .debug_str     0x00000012        0x7 ARM Flash Debug/AT91SAM7.o

.comment        0x00000000       0x6c
 .comment       0x00000000       0x12 ARM Flash Debug/test3.o
 .comment       0x00000012       0x12 ARM Flash Debug/test_AT91SAM7.o
 .comment       0x00000024       0x12 ARM Flash Debug/test_AT91SAM7EK.o
 .comment       0x00000036       0x12 ARM Flash Debug/AT91SAM7.o
 .comment       0x00000048       0x12 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl.o)
 .comment       0x0000005a       0x12 C:/Program Files/Rowley Associates Limited/CrossWorks for ARM 1.5/ctl/lib/libctl_v4t_a_i_le_mt.a(ctl_evt.o)
